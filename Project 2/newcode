
	/// ---------- HELPER FUNCTIONS --------- ///
	/// ----   DO NOT EDIT REST OF FILE   --- ///
  /// ---------- HELPER FUNCTIONS --------- ///
  	/// ----   DO NOT EDIT REST OF FILE   --- ///
      public final boolean valid(int x, int y, int val){
          ops +=1;
          if (vals[x][y] == val)
              return true;
          if (rowContains(x,val))
              return false;
          if (colContains(y,val))
              return false;
          if (blockContains(x,y,val))
              return false;
          return true;
      }

      public final boolean blockContains(int x, int y, int val){
          int block_x = x / 3;
          int block_y = y / 3;
          for(int r = (block_x)*3; r < (block_x+1)*3; r++){
              for(int c = (block_y)*3; c < (block_y+1)*3; c++){
                  if (vals[r][c] == val)
                      return true;
              }
          }
          return false;
      }

      public final boolean colContains(int c, int val){
          for (int r = 0; r < 9; r++){
              if (vals[r][c] == val)
                  return true;
          }
          return false;
      }

      public final boolean rowContains(int r, int val) {
          for (int c = 0; c < 9; c++)
          {
              if(vals[r][c] == val)
                  return true;
          }
          return false;
      }

      private void CheckSolution() {
          // If played by hand, need to grab vals
          board.updateVals(vals);

          for (int v = 1; v <= 9; v++){
              // Every row is valid
              for (int r = 0; r < 9; r++)
              {
                  if (!rowContains(r,v))
                  {
                      board.showMessage("Invalid Row: v: "+v+", r+1: " + (r+1));// + " val: " + v);
                      return;
                  }
              }
              // Every row is valid
              for (int c = 0; c < 9; c++)
              {
                  if (!colContains(c,v))
                  {
                      board.showMessage("Invalid Column: " + (c+1));// + " val: " + v);
                      return;
                  }
              }
              // Every block is valid
              for (int r = 0; r < 3; r++){
                  for (int c = 0; c < 3; c++){
                      if(!blockContains(r, c, v))
                      {
                          board.showMessage("Invalid Block: " + (r+1) + "," + (c+1));// + " val: " + v);
                          return;
                      }
                  }
              }
          }
          board.showMessage("Success!");
      }

  	/// ---- GUI + APP Code --- ////
  	/// ----   DO NOT EDIT  --- ////
      enum algorithm {
          AC3, AC3New
      }
      class Arc implements Comparable<Object>{
          int Xi, Xj;
          public Arc(int cell_i, int cell_j){
              if (cell_i == cell_j){
                  try {
                      throw new Exception(cell_i+ "=" + cell_j);
                  } catch (Exception e) {
                      e.printStackTrace();
                      System.exit(1);
                  }
              }
              Xi = cell_i;      Xj = cell_j;
          }

          public int compareTo(Object o){
              return this.toString().compareTo(o.toString());
          }

          public String toString(){
              return "(" + Xi + "," + Xj + ")";
          }
      }

      enum difficulty {
          easy, medium, noSolution, hardNoSolution, random
      }
  	
  	public void actionPerformed(ActionEvent e){
          String label = ((JButton)e.getSource()).getText();
          if (label.equals("AC-3"))
              AC3Init();
          else if (label.equals("Clear"))
              board.Clear();
          else if (label.equals("Check"))
              CheckSolution();
          //added
          else if(label.equals("AC3New"))
          	AC3New();
  	}
  	
  	public void run() {
          board = new Board(gui,this);
          while(!initialize());
  		if (gui)
  			board.initVals(vals);
  		else {
  			board.writeVals();
  			System.out.println("Algorithm: " + alg);
  			switch(alg) {
  				default:
  				case AC3:
  					AC3Init();
  					break;
  				case AC3New: //added
  					AC3New();
  					break;
  			}
  			CheckSolution();
  		}
      }
  	
      public final boolean initialize(){
          switch(level) {
              case easy:
                  vals[0] = new int[] {0,0,0,1,3,0,0,0,0};
                  vals[1] = new int[] {7,0,0,0,4,2,0,8,3};
                  vals[2] = new int[] {8,0,0,0,0,0,0,4,0};
                  vals[3] = new int[] {0,6,0,0,8,4,0,3,9};
                  vals[4] = new int[] {0,0,0,0,0,0,0,0,0};
                  vals[5] = new int[] {9,8,0,3,6,0,0,5,0};
                  vals[6] = new int[] {0,1,0,0,0,0,0,0,4};
                  vals[7] = new int[] {3,4,0,5,2,0,0,0,8};
                  vals[8] = new int[] {0,0,0,0,7,3,0,0,0};
                  break;
              case medium:
                  vals[0] = new int[] {0,4,0,0,9,8,0,0,5};
                  vals[1] = new int[] {0,0,0,4,0,0,6,0,8};
                  vals[2] = new int[] {0,5,0,0,0,0,0,0,0};
                  vals[3] = new int[] {7,0,1,0,0,9,0,2,0};
                  vals[4] = new int[] {0,0,0,0,8,0,0,0,0};
                  vals[5] = new int[] {0,9,0,6,0,0,3,0,1};
                  vals[6] = new int[] {0,0,0,0,0,0,0,7,0};
                  vals[7] = new int[] {6,0,2,0,0,7,0,0,0};
                  vals[8] = new int[] {3,0,0,8,4,0,0,6,0};
                  break;
              case noSolution:
                  vals[0] = new int[] {0,0,6,0,0,0,0,0,0};
                  vals[1] = new int[] {0,0,0,0,0,0,0,0,0};
                  vals[2] = new int[] {0,0,0,0,0,0,3,0,2};
                  vals[3] = new int[] {0,0,0,0,0,0,0,0,0};
                  vals[4] = new int[] {0,0,0,0,0,8,0,0,0};
                  vals[5] = new int[] {0,0,0,0,0,0,0,0,0};
                  vals[6] = new int[] {3,8,0,0,0,0,9,0,0};
                  vals[7] = new int[] {6,0,1,0,5,0,0,0,0};
                  vals[8] = new int[] {0,9,0,3,0,0,7,2,4};
                  break;
              case hardNoSolution:
                  vals[0] = new int[] {2,0,0,0,0,0,0,0,0};
                  vals[1] = new int[] {0,4,8,0,0,0,0,5,0};
                  vals[2] = new int[] {0,0,0,0,0,0,7,9,8};
                  vals[3] = new int[] {0,0,0,0,0,0,2,0,0};
                  vals[4] = new int[] {0,0,0,0,0,0,0,0,5};
                  vals[5] = new int[] {5,0,0,0,0,0,0,0,0};
                  vals[6] = new int[] {8,6,0,0,0,0,1,0,0};
                  vals[7] = new int[] {0,5,0,0,0,0,0,0,0};
                  vals[8] = new int[] {0,0,0,0,0,0,4,0,0};
                  break;
              case random:
              default:
                  ArrayList<Integer> preset = new ArrayList<Integer>();
                  while (preset.size() < numCells)
                  {
                      int r = rand.nextInt(81);
                      if (!preset.contains(r))
                      {
                          preset.add(r);
                          int x = r / 9;
                          int y = r % 9;
                          if (!assignRandomValue(x, y))
                              return false;
                      }
                  }
  				break;
  		}
          return true;
      }
  	
      public final boolean assignRandomValue(int x, int y){
          ArrayList<Integer> pval = new ArrayList<Integer>(Arrays.asList(1,2,3,4,5,6,7,8,9));
  		
          while(!pval.isEmpty()){
              int ind = rand.nextInt(pval.size());
              int i = pval.get(ind);
              if (valid(x,y,i)) {
                  vals[x][y] = i;
                  return true;
              } else 
                  pval.remove(ind);
          }
          System.err.println("No valid moves exist.  Recreating board.");
          for (int r = 0; r < 9; r++){
              for(int c=0;c<9;c++){
                  vals[r][c] = 0;
  			}    }
          return false;
      }
  	
  	private void Finished(boolean success){
  		if(success) {
  			board.writeVals();
  			board.showMessage("Solved in " + myformat.format(ops) + " ops \t(" + myformat.format(recursions) + " recusive ops)");
  		} else {
  		    board.showMessage("No valid configuration found in " + myformat.format(ops) + " ops \t(" + myformat.format(recursions) + " recursive ops)");
  		}
  	}
  	
  	public static void main(String[] args) {
          
  		Scanner scan = new Scanner(System.in);

      	System.out.println("difficulty? \teasy (e), medium (m), noSolution (n), hardNoSolution (h), random (r)");
     	 
      	char c='*';
      
      	
      	while(c!='e'&& c!='m'&&c!='n'&&c!='h'&&c!='r'){
      		c = scan.nextLine().charAt(0);
      		
  	    	if(c=='e')
  	    		level = difficulty.valueOf("easy");
  	    	else if(c=='m')
  	    		level = difficulty.valueOf("medium");
  	    	else if(c=='n')
  	    		level = difficulty.valueOf("noSolution");
  	    	else if(c=='h')
  	    		level = difficulty.valueOf("hardNoSolution");
  	    	else if(c=='r')
  	    		level = difficulty.valueOf("random");
  	    	else{
  	    		System.out.println("difficulty? \teasy (e), medium (m), noSolution (n), hardNoSolution (h), random(r)");
  	    	}
  	    	//System.out.println("2: "+c+" "+level);
      	}
      	
      	System.out.println("Gui? y or n ");
      	c=scan.nextLine().charAt(0);
      	
  		if (c=='n')
              gui = false;
  		else 
  			gui = true;

  		//System.out.println("c: "+c+", Difficulty: " + level);

  		//System.out.println("Difficulty: " + level);
  		
  		if(!gui){
  			System.out.println("Algorithm? AC3(1) AC3New (2)");
  			if(scan.nextInt()==1)
  				alg = algorithm.valueOf("AC3");
  			else
  				alg = algorithm.valueOf("AC3New");
  		}
  		
          NewSudokuPlayer app = new NewSudokuPlayer();
  		app.run();
      }


      class Board {
          GUI G = null;
          boolean gui = true;
          
          public Board(boolean X, NewSudokuPlayer s) {
              gui = X;
              if (gui)
                  G = new GUI(s);
          }

          public void initVals(int[][] vals){
              G.initVals(vals);
          }

          public void writeVals(){
              if (gui)
                  G.writeVals();
  			else {
  				for (int r = 0; r < 9; r++) {
  					if (r % 3 == 0)
  						System.out.println(" ----------------------------");
  					for (int c = 0; c < 9; c++) {
  						if (c % 3 == 0)
  							System.out.print (" | ");
  						if (vals[r][c] != 0) {
  							System.out.print(vals[r][c] + " ");
  						} else {
  							System.out.print("_ ");
  						}
  					}
  					System.out.println(" | ");
  				}
  				System.out.println(" ----------------------------");
  			}
          }

          public void Clear(){
              if(gui)
                  G.clear();
          }

          public void showMessage(String msg) {
              if (gui)
                  G.showMessage(msg);
              System.out.println(msg);
          }

          public void updateVals(int[][] vals){
              if (gui)
                  G.updateVals(vals);
          }

      }

      class GUI {
          // ---- Graphics ---- //
          int size = 40;
          JFrame mainFrame = null;
          JTextField[][] cells;
          JPanel[][] blocks;

          public void initVals(int[][] vals){
              // Mark in gray as fixed
              for (int r = 0; r < 9; r++) {
                  for (int c = 0; c < 9; c++) {
                      if (vals[r][c] != 0) {
                          cells[r][c].setText(vals[r][c] + "");
                          cells[r][c].setEditable(false);
                          cells[r][c].setBackground(Color.lightGray);
                      }
                  }
              }
          }

          public void showMessage(String msg){
              JOptionPane.showMessageDialog(null,
                 msg,"Message",JOptionPane.INFORMATION_MESSAGE);
          }

          public void updateVals(int[][] vals) {
          	
          	System.out.println("calling update");
              for (int r = 0; r < 9; r++) {
                  for (int c=0; c < 9; c++) {
                      try {
                          vals[r][c] = Integer.parseInt(cells[r][c].getText());
                      } catch (java.lang.NumberFormatException e) {
                      	System.out.println("Invalid Board: rc: "+r+" "+c);
                          showMessage("Invalid Board: rc: "+r+" "+c);
                          return;
                      }
                  }
              }
          }

          public void clear() {
              for (int r = 0; r < 9; r++){
                  for (int c = 0; c < 9; c++){
                      if (cells[r][c].isEditable())
                      {
                          cells[r][c].setText("");
                          vals[r][c] = 0;
                      } else {
                          cells[r][c].setText("" + vals[r][c]);
                      }
                  }
              }
          }

          public void writeVals(){
  		    for (int r=0;r<9;r++){
  			    for(int c=0; c<9; c++){
  				    cells[r][c].setText(vals[r][c] + "");
  			}   }
          }

          public GUI(NewSudokuPlayer s){

              mainFrame = new javax.swing.JFrame();
              mainFrame.setLayout(new BorderLayout());
              mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
              
              JPanel gamePanel = new javax.swing.JPanel();
              gamePanel.setBackground(Color.black);
              mainFrame.add(gamePanel, BorderLayout.NORTH);
              gamePanel.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
              gamePanel.setLayout(new GridLayout(3,3,3,3));
              
              blocks = new JPanel[3][3];
              for (int i = 0; i < 3; i++){
                  for(int j =2 ;j>=0 ;j--){
                      blocks[i][j] = new JPanel();
                      blocks[i][j].setLayout(new GridLayout(3,3));
                      gamePanel.add(blocks[i][j]);
                  }
              }
              
              cells = new JTextField[9][9];
              for (int cell = 0; cell < 81; cell++){
                  int i = cell / 9;
                  int j = cell % 9;
                  cells[i][j] = new JTextField();
                  cells[i][j].setBorder(BorderFactory.createLineBorder(Color.BLACK));
                  cells[i][j].setHorizontalAlignment(JTextField.CENTER);
                  cells[i][j].setSize(new java.awt.Dimension(size, size));
                  cells[i][j].setPreferredSize(new java.awt.Dimension(size, size));
                  cells[i][j].setMinimumSize(new java.awt.Dimension(size, size));
                  blocks[i/3][j/3].add(cells[i][j]);
              }
              
              JPanel buttonPanel = new JPanel(new FlowLayout());
              mainFrame.add(buttonPanel, BorderLayout.SOUTH);
              //JButton DFS_Button = new JButton("DFS");
              //DFS_Button.addActionListener(s);
              JButton AC3_Button = new JButton("AC-3");
              AC3_Button.addActionListener(s);
              JButton Clear_Button = new JButton("Clear");
              Clear_Button.addActionListener(s);
              JButton Check_Button = new JButton("Check");
              Check_Button.addActionListener(s);
              //buttonPanel.add(DFS_Button);
              JButton AC3New_Button = new JButton("AC3New");
              AC3New_Button.addActionListener(s);
              //added
              buttonPanel.add(AC3New_Button);
              buttonPanel.add(AC3_Button);
              buttonPanel.add(Clear_Button);
              buttonPanel.add(Check_Button);
              
              
              
              
          
              
              mainFrame.pack();
              mainFrame.setVisible(true);

          }
      }

      Random rand = new Random();
  	
  	// ----- Helper ---- //
      static algorithm alg = algorithm.AC3;
      static difficulty level = difficulty.easy;
      static boolean gui = true;
      static int ops;
      static int recursions;	
      static int numCells = 15;
      static DecimalFormat myformat = new DecimalFormat("###,###");
  }
	